import { assert, assertObjectMatch } from 'https://deno.land/std@0.162.0/testing/asserts.ts'
import { DataTypeAdapter } from '../streams/dataTypeAdapter.ts'
import { is__MESSAGE_TYPE__, parseBackendMessage, __MESSAGE_TYPE__ } from './messageFormats.generated.ts'
import { ITypedValue, MessageWriterAdapter } from './messageWriterAdapter.ts'
import { WriteReadTester } from '../streams/WriteReadTester.ts'

Deno.test('write/read __MESSAGE_TYPE__', async () => {
    const message: ITypedValue[] = __EXPECTED_TYPED_VALUES__
    const expectedRead = Object.fromEntries(message.map(v => [v.name, v.value])) as Record<string, unknown>

    const writeReadTester = new WriteReadTester()
    let messageWriterAdapter: MessageWriterAdapter | null = null
    let dataTypeAdapter: DataTypeAdapter | null = null

    try {
        messageWriterAdapter = new MessageWriterAdapter(writeReadTester.writable)
        await messageWriterAdapter.writeMessage(message)
        dataTypeAdapter = new DataTypeAdapter(writeReadTester.readable)
        const actualRead = (await parseBackendMessage(dataTypeAdapter)) as unknown as Record<string, unknown>

        assert(is__MESSAGE_TYPE__(actualRead as unknown as __MESSAGE_TYPE__), `typeGuard: is__MESSAGE_TYPE__ failed`)
        assertObjectMatch(actualRead, expectedRead)
        assertObjectMatch(expectedRead, actualRead)
    } finally {
        messageWriterAdapter?.release()
        dataTypeAdapter?.release()
    }
})
