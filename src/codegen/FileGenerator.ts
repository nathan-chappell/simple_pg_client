import { CompilerCallback, ITextCompiler } from './compilers/ITextCompiler.ts'
import { TextCompiler } from './compilers/TextCompiler.ts'

import { Comment } from './components/Comment.ts'
import { IComponent } from './components/IComponent.ts'
import { Import } from './components/Import.ts'

import { IStructure } from './structures/IStructure.ts'

import { Configurable } from './Configurable.ts'
import { Dependencies } from './Dependencies.ts'

const warning = `/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */`

export interface FileGeneratorOptions {
    generationWarning: string
    lintIgnores: string[]
    imports: Import[]
    body: IComponent[]
}

export class FileGenerator extends Configurable<FileGeneratorOptions> implements IComponent {
    constructor(public name: string, public outputDirectory: string) {
        super({
            generationWarning: warning,
            lintIgnores: [],
            imports: [],
            body: [],
        })
    }

    write(compiler: ITextCompiler): ITextCompiler {
        if (this.options.body.length === 0)
            throw new Error(`FileGenerator for (${this.outputPath}) has no body - this is likely an error`)
        return compiler
            .writeLine(this.options.generationWarning)
            .newLine()
            .embed(new Comment([`deno-lint-ignore-file ${this.options.lintIgnores.join(' ')}`]))
            .newLine()
            .embed(...this.options.imports)
            .newLine()
            .embed(...this.options.body)
            .newLine()
            .writeLine(this.options.generationWarning)
    }

    get outputPath(): string {
        return `${this.outputDirectory}/${this.name}.generated.ts`
    }

    emit() {
        console.log(`[FileGenerator.emit] Generating file ${this.outputPath} ...`)
        const data = new TextCompiler().embed(this).compile()
        Dependencies.writeTextFileSync(this.outputPath, data)
        console.log(`[FileGenerator.emit] complete`)
    }
}
