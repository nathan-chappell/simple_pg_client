/* DO NOT EDIT THIS FILE!!! */

import {
    Int32,
    Int16,
    Int8,
    Byte,
    Byte4,
} from './types.ts'

export interface IBackendMessage {
    messageType: string                // string
    length: Int32                      // Int32
}

export interface IAuthenticationMessage extends IBackendMessage {
    messageType: string                // string
    length: Int32                      // Int32
    code: Int32                        // Int32
}

export interface IAuthenticationOk extends IAuthenticationMessage {
    messageType: 'R'                   // Byte1('R')
    length: 8                          // Int32(8)
    code: 0                            // Int32(0)
}

export interface IAuthenticationKerberosV5 extends IAuthenticationMessage {
    messageType: 'R'                   // Byte1('R')
    length: 8                          // Int32(8)
    code: 2                            // Int32(2)
}

export interface IAuthenticationCleartextPassword extends IAuthenticationMessage {
    messageType: 'R'                   // Byte1('R')
    length: 8                          // Int32(8)
    code: 3                            // Int32(3)
}

export interface IAuthenticationMD5Password extends IAuthenticationMessage {
    messageType: 'R'                   // Byte1('R')
    length: 12                         // Int32(12)
    code: 5                            // Int32(5)
    salt: Byte4                        // Byte4
}

export interface IAuthenticationSCMCredential extends IAuthenticationMessage {
    messageType: 'R'                   // Byte1('R')
    length: 8                          // Int32(8)
    code: 6                            // Int32(6)
}

export interface IAuthenticationGSS extends IAuthenticationMessage {
    messageType: 'R'                   // Byte1('R')
    length: 8                          // Int32(8)
    code: 7                            // Int32(7)
}

export interface IAuthenticationSSPI extends IAuthenticationMessage {
    messageType: 'R'                   // Byte1('R')
    length: 8                          // Int32(8)
    code: 9                            // Int32(9)
}

export interface IAuthenticationSASL extends IAuthenticationMessage {
    messageType: 'R'                   // Byte1('R')
    length: Int32                      // Int32
    code: 10                           // Int32(10)
}

export interface IBackendKeyData extends IBackendMessage {
    messageType: 'K'                   // Byte1('K')
    length: 12                         // Int32(12)
    pid: Int32                         // Int32
    key: Int32                         // Int32
}

export interface IBindComplete extends IBackendMessage {
    messageType: '2'                   // Byte1('2')
    length: 4                          // Int32(4)
}

export interface ICloseComplete extends IBackendMessage {
    messageType: '3'                   // Byte1('3')
    length: 4                          // Int32(4)
}

export interface ICommandComplete extends IBackendMessage {
    messageType: 'C'                   // Byte1('C')
    length: Int32                      // Int32
    message: string                    // String
}

export interface ICopyInResponse extends IBackendMessage {
    messageType: 'G'                   // Byte1('G')
    length: Int32                      // Int32
    isBinary: Int8                     // Int8
    formatCodes: Int16[]               // Int16[Int16]
}

export interface ICopyOutResponse extends IBackendMessage {
    messageType: 'H'                   // Byte1('H')
    length: Int32                      // Int32
    isBinary: Int8                     // Int8
    formatCodes: Int16[]               // Int16[Int16]
}

export interface ICopyBothResponse extends IBackendMessage {
    messageType: 'W'                   // Byte1('W')
    length: Int32                      // Int32
    isBinary: Int8                     // Int8
    formatCodes: Int16[]               // Int16[Int16]
}

export interface IDataRow extends IBackendMessage {
    messageType: 'D'                   // Byte1('D')
    length: Int32                      // Int32
    columns: Byte[][]                  // Byte[Int32][Int16]
}

export interface IEmptyQueryResponse extends IBackendMessage {
    messageType: 'I'                   // Byte1('I')
    length: 4                          // Int32(4)
}

export interface IErrorResponse extends IBackendMessage {
    messageType: 'E'                   // Byte1('E')
    length: Int32                      // Int32
}

export interface INoData extends IBackendMessage {
    messageType: 'n'                   // Byte1('n')
    length: 4                          // Int32(4)
}

export interface INoticeResponse extends IBackendMessage {
    messageType: 'N'                   // Byte1('N')
    length: Int32                      // Int32
}

export interface INotificationResponse extends IBackendMessage {
    messageType: 'A'                   // Byte1('A')
    length: Int32                      // Int32
    pid: Int32                         // Int32
    channelName: string                // String
    message: string                    // String
}

export interface IParameterDescription extends IBackendMessage {
    messageType: 't'                   // Byte1('t')
    length: Int32                      // Int32
    parameterTypes: Int32[]            // Int32[Int16]
}

export interface IParameterStatus extends IBackendMessage {
    messageType: 'S'                   // Byte1('S')
    length: Int32                      // Int32
    name: string                       // String
    value: string                      // String
}

export interface IParseComplete extends IBackendMessage {
    messageType: '1'                   // Byte1('1')
    length: 4                          // Int32(4)
}

export interface IPortalSuspended extends IBackendMessage {
    messageType: 's'                   // Byte1('s')
    length: 4                          // Int32(4)
}

export interface IReadyForQuery extends IBackendMessage {
    messageType: 'Z'                   // Byte1('Z')
    length: 5                          // Int32(5)
    status: 'I' | 'T' | 'E'            // 'I' | 'T' | 'E'
}

export interface IRowDescriptionField extends IBackendMessage {
    name: string                       // String
    tableOid: Int32                    // Int32
    columnAttributeNumber: Int16       // Int16
    typeOid: Int32                     // Int32
    typeSize: Int16                    // Int16
    typeModifier: Int32                // Int32
    isBinary: 0 | 1                    // 0 | 1
}

export interface IRowDescription extends IBackendMessage {
    messageType: 'T'                   // Byte1('T')
    length: Int32                      // Int32
    fields: IRowDescriptionField[]     // RowDescriptionField[Int16]
}

export const foo = {};