import { writeFileSync } from "https://deno.land/std@0.161.0/node/fs.ts";
import { formats, ITypeDef, IProperty } from './formats.ts'

const backendFormats = formats.filter(f => f.title.match(/\(B\)/))

const warning = `/* DO NOT EDIT THIS FILE!!! */`

const typeImports = `
import {
    Int32,
    Int16,
    Int8,
    Byte,
    Byte4,
} from './types.ts'`.trim();

export const getType = (typeSpec: string) {
    // literal / intensional types
    if (typeSpec.includes("|") || typeSpec.match(/^\d+$/))
        return typeSpec;
    const { baseType, expected, arraySpec } = typeSpec.match(/^(?<baseType>\w+)(?<arraySpec>(\[\w+\])*)(\((?<expected>[^)]*)\))?/)!.groups!;
    const _arraySpec = '[]'.repeat(arraySpec.split('[').length - 1)
    const _baseType = baseType === 'String' 
    ? 'string' 
    : baseType === 'RowDescriptionField' 
    ? `I${baseType}`
    : baseType;
    return expected || `${_baseType}${_arraySpec}`
}


function getProperty(defItem: IProperty, i: number) {
    const name = defItem.name
    if (!name) {
        throw new Error(`name missing from definition[${i || 0}]: ${defItem.definition}`)
    }
    const type = getType(defItem.type)
    const decl = `${name}: ${type}`;
    const commentIndent = 35 - decl.length;
    return decl + ' '.repeat(commentIndent) + `// ${defItem.type}`
}


function genTypes(name: string, formatList: ITypeDef[]) {
    const types = formatList.map(genType);
    const fileData = `${warning}

${typeImports}

${types.join("\n\n")}
`
    writeFileSync(`./src/messages/${name}.generated.ts`, fileData)
}

genTypes('backendFormats', backendFormats)
