import { writeFileSync } from 'https://deno.land/std@0.161.0/node/fs.ts'
import { formats, IProperty, IMessageDef } from './formats.ts'
import { GenWriter } from '../../generators/genWriter.ts'
import { FunctionDef } from '../../generators/functionDef.ts'
import { ParameterDef } from '../../generators/parameterDef.ts'
import { GenWriterBase } from '../../generators/genWriterBase.ts'
import { InterfacePropertyOptions } from '../../generators/options.ts'
import { InterfaceDef } from '../../generators/interfaceDef.ts'

const validateStartup = () => {
    const cwd = Deno.cwd()
    if (!cwd.endsWith('simple_pg_client')) {
        throw new Error(`Generation script should be run from project root.\n  cwd: ${cwd}`)
    } else {
        console.log(`[validateStartup] cwd: ${cwd}`)
    }
}

validateStartup()

//#region globals
const builtinsFileName = 'builtinTypes'
// const backendMessageDefsFileName = 'backendMessageDefinitions'
// Authentication messages are trickier and will be handled separately
// const backendNonAuthenticationFormats = formats.filter(f => f.backend && !f.title.match(/Authentication/))
// const nonInternalMessageDefs = new Set(formats.filter(f => !f.internal).map(f => f.title))
// const internalMessageDefs = new Set(formats.filter(f => f.internal).map(f => f.title))

const warning = `/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */`

//prettier-ignore
const builtinTypes: { [type: string]: { jsType: string; adapterType: string } } = {
    Int32:  { jsType: 'number',   adapterType: 'Int32'  },
    Int16:  { jsType: 'number',   adapterType: 'Int16'  },
    Int8:   { jsType: 'number',   adapterType: 'Int8'   },
    Byte:   { jsType: 'number',   adapterType: 'Int8'   },
    Byte1:  { jsType: 'string',   adapterType: 'Char'   },
    Byte4:  { jsType: 'number[]', adapterType: 'Byte4'  },
    String: { jsType: 'string',   adapterType: 'String' },
    // Char:   { jsType: 'string',   adapterType: 'Char'   }, // no longer used...
}

//#endregion

//#region imports

const writeImports = (writer: GenWriter) => {
    writer.writeImports(['DataTypeAdapter'], '../streams/dataTypeAdapter.ts')
    writer.writeImports(['MessageWriterAdapter'], './messageWriterAdapter.ts')
    const builtinImports = [...Object.keys(builtinTypes), ...Object.keys(builtinTypes).map(t => `parse${t}`)]
    writer.writeImports(builtinImports, `./${builtinsFileName}.generated.ts`)
}

//#endregion

//#region builtins

// prettier-ignore
const builtinFunctionDef = (name: string) => new FunctionDef(
    `parse${name}`,
    [new ParameterDef('adapter', 'DataTypeAdapter')],
    `Promise<${name}>`,
    { export_: true, arrow_: true, const_: true, expressionBody_: true, }
)

const genBuiltins2 = (writer: GenWriter) => {
    writer.writeImports(['DataTypeAdapter'], '../streams/dataTypeAdapter.ts').newLine()
    const fnDefInfo: [FunctionDef, () => void][] = []
    for (const name of Object.keys(builtinTypes)) {
        const { jsType, adapterType } = builtinTypes[name]
        writer.writeTypeDef(name, jsType, { export_: true })
        // prettier-ignore
        fnDefInfo.push([
            builtinFunctionDef(name),
            () => { writer.writeLine(`adapter.read${adapterType}()`) }
        ])
    }
    writer.newLine()
    for (const info of fnDefInfo) writer.writeFunction(...info)
    writer.newLine()
}

//#endregion

//#region interfaces

const getTsType = (rawType: string) => rawType.replace(/\[[^\]]+\]/g, '[]').replace(/\(.*/, '')

const getInterfaceDef: (messageDef: IMessageDef) => InterfaceDef = messageDef => {
    const properties: InterfacePropertyOptions[] = []
    for (const property of messageDef.definition) {
        properties.push({
            name: property.name,
            type: getTsType(property.type),
            comment: property.definition,
        })
    }
    return new InterfaceDef(messageDef.title, properties, { export_: true })
}

//#endregion

const genFile2 = (fileName: string, writeFile: (writer: GenWriter) => void) => {
    const path = `./src/messages/${fileName}.generated.ts`
    console.log(`[genFile2] Generating file ${fileName} ...`)
    const writer = new GenWriter()
    writeFile(writer)
    /// FILE
    const file = `${warning}\n${writer.compile()}\n${warning}`
    writeFileSync(path, file)
    console.log(`[genFile2] Generating file ${fileName} complete`)
}

genFile2(builtinsFileName, genBuiltins2)

genFile2('genTesting', writer => {
    writeImports(writer)
    writer.withRegion('INTERFACES', () => {
        for (const messageDef of formats) {
            const interfaceDef = getInterfaceDef(messageDef)
            interfaceDef.write(writer)
        }
    })
})
