import { writeFileSync } from 'https://deno.land/std@0.161.0/node/fs.ts'
import { formats, IMessageField, IMessageFormat } from './formats.ts'
// import { TypeInfo } from './typeInfo.ts'
import { ITextCompiler } from '../../compilers/ITextCompiler.ts'
import { Region } from '../../structures/Region.ts'
import { TextCompiler } from '../../compilers/TextCompiler.ts'
import { Import } from '../../components/Import.ts'
import { Interface } from '../../components/Interface.ts'
import { Function_ } from '../../components/Function_.ts'
import { Parameter } from '../../components/Parameter.ts'
import { ParameterList } from '../../components/ParameterList.ts'
import { TypeDef } from '../../components/TypeDef.ts'
import { TypeInfo } from '../components/TypeInfo.ts'
import { Message } from '../components/message.ts'

const validateStartup = () => {
    const cwd = Deno.cwd()
    if (!cwd.endsWith('simple_pg_client')) {
        throw new Error(`Generation script should be run from project root.\n  cwd: ${cwd}`)
    } else {
        console.log(`[validateStartup] cwd: ${cwd}`)
    }
}

validateStartup()

//#region globals
const builtinsFileName = 'builtinTypes'
const warning = `/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */`

export type TBuiltinTypeInfo = { jsType: string; adapterType: string }

//prettier-ignore
export const builtinTypes: { [type: string]: TBuiltinTypeInfo } = {
    Int32:  { jsType: 'number',     adapterType: 'Int32' },
    Int16:  { jsType: 'number',     adapterType: 'Int16' },
    Int8:   { jsType: 'number',     adapterType: 'Int8' },
    Byte:   { jsType: 'number',     adapterType: 'Int8' },
    Byte1:  { jsType: 'string',     adapterType: 'Char' },
    Byte4:  { jsType: 'number[]',   adapterType: 'Byte4' },
    String: { jsType: 'string',     adapterType: 'String' },
    // Char:   { jsType: 'string',   adapterType: 'Char'   }, // no longer used...
}

const messages = formats.map(f => new Message(f))

//#endregion

//#region imports

const imports_ = {
    DataTypeAdapter: new Import(['DataTypeAdapter'], '../streams/dataTypeAdapter.ts'),
    // MessageWriterAdapter: new Import(['DataTypeAdapter'], '../streams/dataTypeAdapter.ts'),
    builtins: new Import(
        [...Object.keys(builtinTypes), ...Object.keys(builtinTypes).map(t => `parse${t}`)],
        `./${builtinsFileName}.generated.ts`
    ),
}

//#endregion

//#region builtins

// prettier-ignore
const builtinFunction_ = (name: string) => new Function_(
    `parse${name}`,
    new ParameterList([new Parameter('adapter', 'DataTypeAdapter')]),
    `Promise<${name}>`
).with(
    { export_: true, arrow_: true, const_: true, expressionBody_: true, }
)

const genBuiltins2 = (compiler: ITextCompiler) => {
    compiler.embed(imports_.DataTypeAdapter)
    const typeDefs = Object.entries(builtinTypes).map(([name, { jsType }]) => new TypeDef(name, jsType))
    const parsers = Object.entries(builtinTypes).map(([name, { adapterType }]) =>
        new Function_(
            `parse${name}`,
            new ParameterList([new Parameter('adapter', 'DataTypeAdapter')]),
            `Promise<${name}>`
        ).with({
            arrow_: true,
            export_: true,
            const_: true,
            expressionBody_: true,
            body: _compiler => {
                _compiler.writeLine(`adapter.read${adapterType}()`)
            },
        })
    )
    for (let p of parsers) if (p.options.body === null) throw new Error(`${p.name} got null body`)
    compiler.newLine()
    compiler.embed(...typeDefs)
    compiler.newLine()
    compiler.embed(...parsers)
}

//#endregion

//#region interfaces

const getInterface: (format: IMessageFormat) => Interface = format => {
    const properties: InterfacePropertyOptions[] = []
    for (const property of format.definition) {
        properties.push({
            name: property.name,
            type: new TypeInfo(property.type).tsType,
            comment: property.definition,
        })
    }
    return new Interface(format.title, properties).with({ export_: true })
}

//#endregion

//#region Parsers

const genMessages = (compiler: ITextCompiler) => {
    compiler.embed(...Object.values(imports_)).newLine()
    for (const message of messages) {
        // compiler.embed(message.interface, message.parser, message.guard)
        compiler.build(new Region(message.format.title), _compiler => {
            _compiler
                // .embed(message.interface)
                .newLine()
                .embed(message.parser)
                .newLine()
                // .embed(message.guard)
        })
    }
}

//#endregion

const genFile2 = (fileName: string, writeFile: (compiler: ITextCompiler) => void) => {
    const path = `./src/messages/${fileName}.generated.ts`
    console.log(`[genFile2] Generating file ${fileName} ...`)
    const compiler = new TextCompiler()
    writeFile(compiler)
    /// FILE
    const file = `${warning}\n${compiler.compile()}\n${warning}`
    writeFileSync(path, file)
    console.log(`[genFile2] Generating file ${fileName} complete`)
}

genFile2(builtinsFileName, genBuiltins2)

genFile2('genTesting', genMessages)
