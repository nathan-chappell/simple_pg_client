/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */
// deno-lint-ignore-file

import { assert, assertObjectMatch } from 'https://deno.land/std@0.162.0/testing/asserts.ts'
import { DataTypeAdapter } from '../../streams/dataTypeAdapter.ts'
import { isDataRow, parseBackendMessage, DataRow } from '../messageFormats.generated.ts'
import { MessageWriterAdapter } from '../messageWriterAdapter.ts'
import { NamedTypedValue } from '../ITypedValue.ts'
import { WriteReadTester } from '../../streams/WriteReadTester.ts'
import { fromEntries } from '../fromEntries.ts'
// import { INamedTypedValue } from "../../codegen/ITV.ts";

Deno.test('write/read DataRow', async () => {
    const message: NamedTypedValue[] = [
        { type: 'Char', value: 'D', name: 'messageType' },
        { type: 'Int32', value: 2264035265, name: 'length' },
        {
            sizeType: 'Int16',
            value: [
                {
                    sizeType: 'Int32',
                    value: [
                        { type: 'Int8', value: 26 },
                        { type: 'Int8', value: 27 },
                        { type: 'Int8', value: 28 },
                    ],
                },
                {
                    sizeType: 'Int32',
                    value: [
                        { type: 'Int8', value: 29 },
                        { type: 'Int8', value: 30 },
                        { type: 'Int8', value: 31 },
                    ],
                },
                {
                    sizeType: 'Int32',
                    value: [
                        { type: 'Int8', value: 32 },
                        { type: 'Int8', value: 33 },
                        { type: 'Int8', value: 34 },
                    ],
                },
            ],
            name: 'columns',
        },
    ]
    // const expectedRead = Object.fromEntries(message.map(v => [v.name, v.value])) as Record<string, unknown>
    const expectedRead = fromEntries(message) as Record<string, unknown>

    const writeReadTester = new WriteReadTester()
    let messageWriterAdapter: MessageWriterAdapter | null = null
    let dataTypeAdapter: DataTypeAdapter | null = null

    try {
        messageWriterAdapter = new MessageWriterAdapter(writeReadTester.writable)
        await messageWriterAdapter.writeMessage(message)
        dataTypeAdapter = new DataTypeAdapter(writeReadTester.readable)
        const actualRead = (await parseBackendMessage(dataTypeAdapter)) as unknown as Record<string, unknown>

        assert(isDataRow(actualRead as unknown as DataRow), `typeGuard: isDataRow failed`)

        delete expectedRead.length
        delete actualRead.length

        assertObjectMatch(actualRead, expectedRead)
        assertObjectMatch(expectedRead, actualRead)
    } finally {
        messageWriterAdapter?.release()
        dataTypeAdapter?.release()
    }
})

/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */
