/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */
import { DataTypeAdapter } from '../streams/dataTypeAdapter.ts'

import {
    Int32,
    Int16,
    Int8,
    Byte,
    Byte1,
    Byte4,
    String,
    parseInt32,
    parseInt16,
    parseInt8,
    parseByte,
    parseByte1,
    parseByte4,
    parseString,
} from './builtinTypes.generated.ts'



//#region IBackendMessage


export const parseIBackendMessage: (adapter: DataTypeAdapter) => IBackendMessage = async (adapter) => {
    const messageType: String = await parseString(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // IBackendMessage
}

//#endregion

//#region AuthenticationOk


export const parseAuthenticationOk: (adapter: DataTypeAdapter) => AuthenticationOk = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const code: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        code,
    } // AuthenticationOk
}

//#endregion

//#region AuthenticationKerberosV5


export const parseAuthenticationKerberosV5: (adapter: DataTypeAdapter) => AuthenticationKerberosV5 = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const code: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        code,
    } // AuthenticationKerberosV5
}

//#endregion

//#region AuthenticationCleartextPassword


export const parseAuthenticationCleartextPassword: (adapter: DataTypeAdapter) => AuthenticationCleartextPassword = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const code: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        code,
    } // AuthenticationCleartextPassword
}

//#endregion

//#region AuthenticationMD5Password


export const parseAuthenticationMD5Password: (adapter: DataTypeAdapter) => AuthenticationMD5Password = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const code: Int32 = await parseInt32(adapter)
    const salt: Byte4 = await parseByte4(adapter)
    return {
        messageType,
        length,
        code,
        salt,
    } // AuthenticationMD5Password
}

//#endregion

//#region AuthenticationSCMCredential


export const parseAuthenticationSCMCredential: (adapter: DataTypeAdapter) => AuthenticationSCMCredential = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const code: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        code,
    } // AuthenticationSCMCredential
}

//#endregion

//#region AuthenticationGSS


export const parseAuthenticationGSS: (adapter: DataTypeAdapter) => AuthenticationGSS = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const code: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        code,
    } // AuthenticationGSS
}

//#endregion

//#region AuthenticationSSPI


export const parseAuthenticationSSPI: (adapter: DataTypeAdapter) => AuthenticationSSPI = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const code: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        code,
    } // AuthenticationSSPI
}

//#endregion

//#region AuthenticationSASL


export const parseAuthenticationSASL: (adapter: DataTypeAdapter) => AuthenticationSASL = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const code: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        code,
    } // AuthenticationSASL
}

//#endregion

//#region BackendKeyData


export const parseBackendKeyData: (adapter: DataTypeAdapter) => BackendKeyData = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const pid: Int32 = await parseInt32(adapter)
    const key: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        pid,
        key,
    } // BackendKeyData
}

//#endregion

//#region Bind


export const parseBind: (adapter: DataTypeAdapter) => Bind = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const portalName: String = await parseString(adapter)
    const statementName: String = await parseString(adapter)
    const size0: Int16 = await parseInt16(adapter)
    const pFormats: Int16[] = []
    for (let _2: number = 0; _2 < size0; ++_2) {
        const result1: Int16 = await parseInt16(adapter)
        pFormats.push(result1)
    }
    const size3: Int16 = await parseInt16(adapter)
    const parameters: Byte[][] = []
    for (let _5: number = 0; _5 < size3; ++_5) {
        const size6: Int32 = await parseInt32(adapter)
        const result4: Byte[] = []
        for (let _8: number = 0; _8 < size6; ++_8) {
            const result7: Byte = await parseByte(adapter)
            result4.push(result7)
        }
        parameters.push(result4)
    }
    const size9: Int16 = await parseInt16(adapter)
    const rFormats: Int16[] = []
    for (let _11: number = 0; _11 < size9; ++_11) {
        const result10: Int16 = await parseInt16(adapter)
        rFormats.push(result10)
    }
    return {
        messageType,
        length,
        portalName,
        statementName,
        pFormats,
        parameters,
        rFormats,
    } // Bind
}

//#endregion

//#region BindComplete


export const parseBindComplete: (adapter: DataTypeAdapter) => BindComplete = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // BindComplete
}

//#endregion

//#region CancelRequest


export const parseCancelRequest: (adapter: DataTypeAdapter) => CancelRequest = async (adapter) => {
    const messageType: Int32 = await parseInt32(adapter)
    const length: Int32 = await parseInt32(adapter)
    const pid: Int32 = await parseInt32(adapter)
    const key: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        pid,
        key,
    } // CancelRequest
}

//#endregion

//#region Close


export const parseClose: (adapter: DataTypeAdapter) => Close = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const qType: Byte1 = await parseByte1(adapter)
    const name: String = await parseString(adapter)
    return {
        messageType,
        length,
        qType,
        name,
    } // Close
}

//#endregion

//#region CloseComplete


export const parseCloseComplete: (adapter: DataTypeAdapter) => CloseComplete = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // CloseComplete
}

//#endregion

//#region CommandComplete


export const parseCommandComplete: (adapter: DataTypeAdapter) => CommandComplete = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const message: String = await parseString(adapter)
    return {
        messageType,
        length,
        message,
    } // CommandComplete
}

//#endregion

//#region CopyFail


export const parseCopyFail: (adapter: DataTypeAdapter) => CopyFail = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const message: String = await parseString(adapter)
    return {
        messageType,
        length,
        message,
    } // CopyFail
}

//#endregion

//#region CopyInResponse


export const parseCopyInResponse: (adapter: DataTypeAdapter) => CopyInResponse = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const isBinary: Int8 = await parseInt8(adapter)
    const size12: Int16 = await parseInt16(adapter)
    const formatCodes: Int16[] = []
    for (let _14: number = 0; _14 < size12; ++_14) {
        const result13: Int16 = await parseInt16(adapter)
        formatCodes.push(result13)
    }
    return {
        messageType,
        length,
        isBinary,
        formatCodes,
    } // CopyInResponse
}

//#endregion

//#region CopyOutResponse


export const parseCopyOutResponse: (adapter: DataTypeAdapter) => CopyOutResponse = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const isBinary: Int8 = await parseInt8(adapter)
    const size15: Int16 = await parseInt16(adapter)
    const formatCodes: Int16[] = []
    for (let _17: number = 0; _17 < size15; ++_17) {
        const result16: Int16 = await parseInt16(adapter)
        formatCodes.push(result16)
    }
    return {
        messageType,
        length,
        isBinary,
        formatCodes,
    } // CopyOutResponse
}

//#endregion

//#region CopyBothResponse


export const parseCopyBothResponse: (adapter: DataTypeAdapter) => CopyBothResponse = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const isBinary: Int8 = await parseInt8(adapter)
    const size18: Int16 = await parseInt16(adapter)
    const formatCodes: Int16[] = []
    for (let _20: number = 0; _20 < size18; ++_20) {
        const result19: Int16 = await parseInt16(adapter)
        formatCodes.push(result19)
    }
    return {
        messageType,
        length,
        isBinary,
        formatCodes,
    } // CopyBothResponse
}

//#endregion

//#region DataRow


export const parseDataRow: (adapter: DataTypeAdapter) => DataRow = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const size21: Int16 = await parseInt16(adapter)
    const columns: Byte[][] = []
    for (let _23: number = 0; _23 < size21; ++_23) {
        const size24: Int32 = await parseInt32(adapter)
        const result22: Byte[] = []
        for (let _26: number = 0; _26 < size24; ++_26) {
            const result25: Byte = await parseByte(adapter)
            result22.push(result25)
        }
        columns.push(result22)
    }
    return {
        messageType,
        length,
        columns,
    } // DataRow
}

//#endregion

//#region Describe


export const parseDescribe: (adapter: DataTypeAdapter) => Describe = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const qType: Byte1 = await parseByte1(adapter)
    const name: String = await parseString(adapter)
    return {
        messageType,
        length,
        qType,
        name,
    } // Describe
}

//#endregion

//#region EmptyQueryResponse


export const parseEmptyQueryResponse: (adapter: DataTypeAdapter) => EmptyQueryResponse = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // EmptyQueryResponse
}

//#endregion

//#region ErrorResponse


export const parseErrorResponse: (adapter: DataTypeAdapter) => ErrorResponse = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // ErrorResponse
}

//#endregion

//#region Execute


export const parseExecute: (adapter: DataTypeAdapter) => Execute = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const name: String = await parseString(adapter)
    const limit: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
        name,
        limit,
    } // Execute
}

//#endregion

//#region Flush


export const parseFlush: (adapter: DataTypeAdapter) => Flush = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // Flush
}

//#endregion

//#region NoData


export const parseNoData: (adapter: DataTypeAdapter) => NoData = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // NoData
}

//#endregion

//#region NoticeResponse


export const parseNoticeResponse: (adapter: DataTypeAdapter) => NoticeResponse = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // NoticeResponse
}

//#endregion

//#region NotificationResponse


export const parseNotificationResponse: (adapter: DataTypeAdapter) => NotificationResponse = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const pid: Int32 = await parseInt32(adapter)
    const channelName: String = await parseString(adapter)
    const message: String = await parseString(adapter)
    return {
        messageType,
        length,
        pid,
        channelName,
        message,
    } // NotificationResponse
}

//#endregion

//#region ParameterDescription


export const parseParameterDescription: (adapter: DataTypeAdapter) => ParameterDescription = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const size27: Int16 = await parseInt16(adapter)
    const pTypes: Int32[] = []
    for (let _29: number = 0; _29 < size27; ++_29) {
        const result28: Int32 = await parseInt32(adapter)
        pTypes.push(result28)
    }
    return {
        messageType,
        length,
        pTypes,
    } // ParameterDescription
}

//#endregion

//#region ParameterStatus


export const parseParameterStatus: (adapter: DataTypeAdapter) => ParameterStatus = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const name: String = await parseString(adapter)
    const value: String = await parseString(adapter)
    return {
        messageType,
        length,
        name,
        value,
    } // ParameterStatus
}

//#endregion

//#region Parse


export const parseParse: (adapter: DataTypeAdapter) => Parse = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const name: String = await parseString(adapter)
    const query: String = await parseString(adapter)
    const size30: Int16 = await parseInt16(adapter)
    const pTypes: Int32[] = []
    for (let _32: number = 0; _32 < size30; ++_32) {
        const result31: Int32 = await parseInt32(adapter)
        pTypes.push(result31)
    }
    return {
        messageType,
        length,
        name,
        query,
        pTypes,
    } // Parse
}

//#endregion

//#region ParseComplete


export const parseParseComplete: (adapter: DataTypeAdapter) => ParseComplete = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // ParseComplete
}

//#endregion

//#region PasswordMessage


export const parsePasswordMessage: (adapter: DataTypeAdapter) => PasswordMessage = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const password: String = await parseString(adapter)
    return {
        messageType,
        length,
        password,
    } // PasswordMessage
}

//#endregion

//#region PortalSuspended


export const parsePortalSuspended: (adapter: DataTypeAdapter) => PortalSuspended = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // PortalSuspended
}

//#endregion

//#region Query


export const parseQuery: (adapter: DataTypeAdapter) => Query = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const query: String = await parseString(adapter)
    return {
        messageType,
        length,
        query,
    } // Query
}

//#endregion

//#region ReadyForQuery


export const parseReadyForQuery: (adapter: DataTypeAdapter) => ReadyForQuery = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const status: Byte1 = await parseByte1(adapter)
    return {
        messageType,
        length,
        status,
    } // ReadyForQuery
}

//#endregion

//#region IField


export const parseIField: (adapter: DataTypeAdapter) => IField = async (adapter) => {
    const name: String = await parseString(adapter)
    const tableOid: Int32 = await parseInt32(adapter)
    const attrNo: Int16 = await parseInt16(adapter)
    const typeOid: Int32 = await parseInt32(adapter)
    const typeSize: Int16 = await parseInt16(adapter)
    const typeModifier: Int32 = await parseInt32(adapter)
    const isBinary: Int16 = await parseInt16(adapter)
    return {
        name,
        tableOid,
        attrNo,
        typeOid,
        typeSize,
        typeModifier,
        isBinary,
    } // IField
}

//#endregion

//#region RowDescription


export const parseRowDescription: (adapter: DataTypeAdapter) => RowDescription = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    const size33: Int16 = await parseInt16(adapter)
    const fields: IField[] = []
    for (let _35: number = 0; _35 < size33; ++_35) {
        const result34: IField = await parseIField(adapter)
        fields.push(result34)
    }
    return {
        messageType,
        length,
        fields,
    } // RowDescription
}

//#endregion

//#region SSLRequest


export const parseSSLRequest: (adapter: DataTypeAdapter) => SSLRequest = async (adapter) => {
    const messageType: Int32 = await parseInt32(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // SSLRequest
}

//#endregion

//#region StartupMessage


export const parseStartupMessage: (adapter: DataTypeAdapter) => StartupMessage = async (adapter) => {
    const length: Int32 = await parseInt32(adapter)
    const protocol: Int32 = await parseInt32(adapter)
    return {
        length,
        protocol,
    } // StartupMessage
}

//#endregion

//#region Sync


export const parseSync: (adapter: DataTypeAdapter) => Sync = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // Sync
}

//#endregion

//#region Terminate


export const parseTerminate: (adapter: DataTypeAdapter) => Terminate = async (adapter) => {
    const messageType: Byte1 = await parseByte1(adapter)
    const length: Int32 = await parseInt32(adapter)
    return {
        messageType,
        length,
    } // Terminate
}

//#endregion

/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */