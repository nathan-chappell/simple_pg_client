/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */

import { DataTypeAdapter } from '../streams/dataTypeAdapter.ts'
import {
    Int32,
    Int16,
    Int8,
    Byte,
    Byte1,
    String,
    parseInt32,
    parseInt16,
    parseInt8,
    parseByte,
    parseByte1,
    parseString,
} from './builtinTypes.generated.ts'


export interface IBackendMessage {
    messageType: String                // String
    length: Int32                      // Int32
}

export interface IBackendKeyData extends IBackendMessage {
    messageType: Byte1                 // Byte1('K')
    length: Int32                      // Int32(12)
    pid: Int32                         // Int32
    key: Int32                         // Int32
}

export interface IBindComplete extends IBackendMessage {
    messageType: Byte1                 // Byte1('2')
    length: Int32                      // Int32(4)
}

export interface ICloseComplete extends IBackendMessage {
    messageType: Byte1                 // Byte1('3')
    length: Int32                      // Int32(4)
}

export interface ICommandComplete extends IBackendMessage {
    messageType: Byte1                 // Byte1('C')
    length: Int32                      // Int32
    message: String                    // String
}

export interface ICopyInResponse extends IBackendMessage {
    messageType: Byte1                 // Byte1('G')
    length: Int32                      // Int32
    isBinary: Int8                     // Int8
    formatCodes: Int16[]               // Int16[Int16]
}

export interface ICopyOutResponse extends IBackendMessage {
    messageType: Byte1                 // Byte1('H')
    length: Int32                      // Int32
    isBinary: Int8                     // Int8
    formatCodes: Int16[]               // Int16[Int16]
}

export interface ICopyBothResponse extends IBackendMessage {
    messageType: Byte1                 // Byte1('W')
    length: Int32                      // Int32
    isBinary: Int8                     // Int8
    formatCodes: Int16[]               // Int16[Int16]
}

export interface IDataRow extends IBackendMessage {
    messageType: Byte1                 // Byte1('D')
    length: Int32                      // Int32
    columns: Byte[][]                  // Byte[Int32][Int16]
}

export interface IEmptyQueryResponse extends IBackendMessage {
    messageType: Byte1                 // Byte1('I')
    length: Int32                      // Int32(4)
}

export interface IErrorResponse extends IBackendMessage {
    messageType: Byte1                 // Byte1('E')
    length: Int32                      // Int32
}

export interface INoData extends IBackendMessage {
    messageType: Byte1                 // Byte1('n')
    length: Int32                      // Int32(4)
}

export interface INoticeResponse extends IBackendMessage {
    messageType: Byte1                 // Byte1('N')
    length: Int32                      // Int32
}

export interface INotificationResponse extends IBackendMessage {
    messageType: Byte1                 // Byte1('A')
    length: Int32                      // Int32
    pid: Int32                         // Int32
    channelName: String                // String
    message: String                    // String
}

export interface IParameterDescription extends IBackendMessage {
    messageType: Byte1                 // Byte1('t')
    length: Int32                      // Int32
    parameterTypes: Int32[]            // Int32[Int16]
}

export interface IParameterStatus extends IBackendMessage {
    messageType: Byte1                 // Byte1('S')
    length: Int32                      // Int32
    name: String                       // String
    value: String                      // String
}

export interface IParseComplete extends IBackendMessage {
    messageType: Byte1                 // Byte1('1')
    length: Int32                      // Int32(4)
}

export interface IPortalSuspended extends IBackendMessage {
    messageType: Byte1                 // Byte1('s')
    length: Int32                      // Int32(4)
}

export interface IReadyForQuery extends IBackendMessage {
    messageType: Byte1                 // Byte1('Z')
    length: Int32                      // Int32(5)
    status: 'I' | 'T' | 'E'            // 'I' | 'T' | 'E'
}

export interface IRowDescriptionField extends IBackendMessage {
    name: String                       // String
    tableOid: Int32                    // Int32
    columnAttributeNumber: Int16       // Int16
    typeOid: Int32                     // Int32
    typeSize: Int16                    // Int16
    typeModifier: Int32                // Int32
    isBinary: Int16                    // Int16
}

export interface IRowDescription extends IBackendMessage {
    messageType: Byte1                 // Byte1('T')
    length: Int32                      // Int32
    fields: IRowDescriptionField[]     // IRowDescriptionField[Int16]
}

const parseIBackendMessage: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IBackendMessage>
  = async (adapter, baseMessage) => {
    export const messageType = await parseString(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parseBackendKeyData: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IBackendKeyData>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const pid = await parseInt32(adapter)
    export const key = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        pid,
        key,
    }
}

const parseBindComplete: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IBindComplete>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parseCloseComplete: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<ICloseComplete>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parseCommandComplete: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<ICommandComplete>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const message = await parseString(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        message,
    }
}

const parseCopyInResponse: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<ICopyInResponse>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const isBinary = await parseInt8(adapter)
    export const formatCodes = await parseInt16(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        isBinary,
        formatCodes,
    }
}

const parseCopyOutResponse: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<ICopyOutResponse>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const isBinary = await parseInt8(adapter)
    export const formatCodes = await parseInt16(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        isBinary,
        formatCodes,
    }
}

const parseCopyBothResponse: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<ICopyBothResponse>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const isBinary = await parseInt8(adapter)
    export const formatCodes = await parseInt16(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        isBinary,
        formatCodes,
    }
}

const parseDataRow: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IDataRow>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const columns = await parseByte(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        columns,
    }
}

const parseEmptyQueryResponse: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IEmptyQueryResponse>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parseErrorResponse: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IErrorResponse>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parseNoData: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<INoData>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parseNoticeResponse: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<INoticeResponse>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parseNotificationResponse: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<INotificationResponse>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const pid = await parseInt32(adapter)
    export const channelName = await parseString(adapter)
    export const message = await parseString(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        pid,
        channelName,
        message,
    }
}

const parseParameterDescription: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IParameterDescription>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const parameterTypes = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        parameterTypes,
    }
}

const parseParameterStatus: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IParameterStatus>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const name = await parseString(adapter)
    export const value = await parseString(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        name,
        value,
    }
}

const parseParseComplete: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IParseComplete>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parsePortalSuspended: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IPortalSuspended>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
    }
}

const parseReadyForQuery: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IReadyForQuery>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const status = await parse'I' | 'T' | 'E'(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        status,
    }
}

const parseIRowDescriptionField: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IRowDescriptionField>
  = async (adapter, baseMessage) => {
    export const name = await parseString(adapter)
    export const tableOid = await parseInt32(adapter)
    export const columnAttributeNumber = await parseInt16(adapter)
    export const typeOid = await parseInt32(adapter)
    export const typeSize = await parseInt16(adapter)
    export const typeModifier = await parseInt32(adapter)
    export const isBinary = await parseInt16(adapter)
    return {
        ...baseMessage,
        name,
        tableOid,
        columnAttributeNumber,
        typeOid,
        typeSize,
        typeModifier,
        isBinary,
    }
}

const parseRowDescription: (adapter: DataTypeAdapter, baseMessage: IBackendMessage) => Promise<IRowDescription>
  = async (adapter, baseMessage) => {
    export const messageType = await parseByte1(adapter)
    export const length = await parseInt32(adapter)
    export const fields = await parseIRowDescriptionField(adapter)
    return {
        ...baseMessage,
        messageType,
        length,
        fields,
    }
}

/* DO NOT EDIT THIS FILE!!!  It has been generated for your pleasure. */